#!/usr/bin/env python3
# coding=utf-8
'''
主运行程序
调用爬虫、数据提取程序、开放域抽取、限定域抽取、图数据库导入程序

'''

__author__ = "Haorui ZHU"

'''
使用方法：

结构：1 argument parser 选择功能
     2 各种功能函数
'''

from openExtraction import extraction
#from directRel import htmlExtractor
import os
import sys
import argparse
import numpy as np
import pandas as pd
from import_neo4j import readf, Create



#获取使用程序的需求及所需参数
parser = argparse.ArgumentParser()
parser.add_argument('--html_parser', default='no', help='for extracting the data from html file, '
                                                        'your arguments should be like "yes" or "no, '
                                                        'you need to put '
                                                        'your html files in directRel/知网html')

parser.add_argument('--json_parser', default='no', help='for extracting the data from json file')

#开放域抽取 relation extraction in open domain
parser.add_argument('--open_extraction', default='no', help='get relation pairs with ltp tools in open domain,\n'
                                                        'your arguments should be like "yes" or "no" \n'
                                                            'if you choose to use it, you need to input other 4 arguments\n'
                                                            ': --open_input_file, --open_output_file, --open_begin_line, --open_end_line')
parser.add_argument('--open_input_file', default="corpus/漏洞.txt",  help='get relation pairs with ltp tools in open domain,\n'
                                                                 'type your inout txt file'
                                                                 'ex: "corpus/漏洞.txt"')
parser.add_argument('--open_output_file', default="output/漏洞open.csv", help='get relation pairs with ltp tools in open domain,\n'
                                                                 'type your output txt file'
                                                                  'ex: "output/漏洞open.csv"')
parser.add_argument('--open_begin_line', default=0, type=int, help='begin line of extraction, ex: 0 ')
parser.add_argument('--open_end_line', default=-1, type=int, help='end line of extraction, ex: -1 ')


parser.add_argument('--ner', default=3, type=int, help='named entity recognition, ')
parser.add_argument('--opennre', default=3, type=int, help='relation extraction: train/use model')


parser.add_argument('--importneo4j', default='no',  help='import data to neo4j graph database,\n'
                                                         'your arguments should be like "yes" or "no" \n')


args = parser.parse_args()





def htmlparser():
    '''
    调用html提取程序，从html语料中提取直接关系以及供间接关系提取的语料
    :return:
    '''
    os.system('python3.7 directRel/htmlExtractor.py')

def jsonparser():
    '''
    调用json提取程序，从json语料中提取直接关系以及供间接关系提取的语料

    :return:
    '''


def openextracion(in_file_name, out_file_name, begin_line, end_line):
    '''
    调用基于ltp的事实三元组抽取程序获取三元组
    使用Ltp模型，分词，词性识别，实体识别(人名地名机构)，依存句法分析等已训练模型
    识别方式 根据谓词，主谓宾
		根据命名实体有关
		直接将三元组从句子中提出

    效果：很多句子无法提取(结果为空)，提取三元组不理想

    :return:
    '''
    os.system('python3.7 openExtraction/extraction.py \
    {in_file_name} {out_file_name} {begin_line} {end_line}'.format(in_file_name = in_file_name, \
                                                                   out_file_name = out_file_name,\
                                                                   begin_line = begin_line,\
                                                                   end_line = end_line)) #指令随操作系统和python版本而调整，需要提前安装ltp包
    output = out_file_name
    output.replace('txt','csv')
    #txt2csv(out_file_name, output)
    os.rename(out_file_name, output)

def importNeo4j():
    '''
    调用利用py2neo库的图数据库导入程序
    :return:
    '''
    y = readf()
    csv_file1, graph, csv_file2, csv_file3, csv_file4 = y.readfile()
    x = Create(csv_file1, graph, csv_file2, csv_file3, csv_file4)
    x.file1()
    x.file2()
    x.file3()
    x.file4()
    x.execu()


def txt2csv(input, output):
    txt = np.loadtxt(input, dtype=bytes).astype(str)
    txtDF = pd.DataFrame(txt)
    txtDF.to_csv(output)


if args.open_extraction == 'yes':
    openextracion(args.open_input_file, args.open_output_file, args.open_begin_line, args.open_end_line)


if args.html_parser == 'yes':
    htmlparser()


if args.importneo4j == 'yes':
    importNeo4j()


if __name__ == '__main__':
        #openextracion( 'corpus/漏洞.txt', 'output/漏洞open.csv', 0, -1) #试验开放域抽取
